* CL-TELEGRAM-BOT Notes

** First suggestion
The repository is here: https://github.com/40ants/cl-telegram-bot

Iâ€™ll create a branch with the documentation stub soon and you will sent you
instructions how to extend it.

Meanwhile you can try to create your own simple bot using instructions from the
README. And also you can read through documentation on documentation builder:
https://40ants.com/doc/

** Cloned repo
file:~/Programming/Lisp/cl-telegram-bot/README.md::1
file:~/Programming/Lisp/cl-telegram-bot/cl-telegram-bot.asd::1


** Loading from Ultralisp

*** Naive loading from quicklisp fails:
(ql:quickload :cl-telegram-bot)

*** Trying to put cloned code in local projects
#+begin_example
jacek@jacek-ixtreme-M5850:~/quicklisp/local-projects$ ln -s /home/jacek/Programming/Lisp/cl-telegram-bot ./cl-telegram-bot
jacek@jacek-ixtreme-M5850:~/quicklisp/local-projects$ ls -lh ./*teleg*
  lrwxrwxrwx 1 jacek jacek 44 Apr 17 20:49 ./cl-telegram-bot -> /home/jacek/Programming/Lisp/cl-telegram-bot
#+end_example

*** First loading fails
After putting cloned project in local folders, it fails to load
~(ql:quickload :cl-telegram-bot)~

#+begin_example
[package bordeaux-threads]........................
[package log4cl.package-setup]....................
[package log4cl-impl]...
;
; caught ERROR:
;   READ error during COMPILE-FILE:
;
;     Lock on package SB-C violated when interning LAMBDA-PARENT while in package
;     LOG4CL-IMPL.
;   See also:
;     The SBCL Manual, Node "Package Locks"
;
;     (in form starting at line: 99, column: 0, position: 3779)
.
;
; caught ERROR:
;   READ error during COMPILE-FILE:
;
;     Lock on package SB-C violated when interning LAMBDA-PARENT while in package
;     LOG4CL-IMPL.
;   See also:
;     The SBCL Manual, Node "Package Locks"
;
;     (in form starting at line: 99, column: 0, position: 3779)
;
; compilation unit aborted
;   caught 3 fatal ERROR conditions
;   caught 2 ERROR conditions
; Evaluation aborted on #<UIOP/LISP-BUILD:COMPILE-FILE-ERROR {100D7AC5A3}>.
CL-USER> (ql:uninstall :cl-telegram-bot)
T
CL-USER> (ql:quickload :cl-telegram-bot)
To load "cl-telegram-bot":
  Load 1 ASDF system:
    cl-telegram-bot
; Loading "cl-telegram-bot"
;
; caught ERROR:
;   READ error during COMPILE-FILE:
;
;     Lock on package SB-C violated when interning LAMBDA-PARENT while in package
;     LOG4CL-IMPL.
;   See also:
;     The SBCL Manual, Node "Package Locks"
;
;     (in form starting at line: 99, column: 0, position: 3779)
#+end_example

*** Trying to add Ultralisp
Add ultralisp
~(ql-dist:install-dist "http://dist.ultralisp.org/" :prompt nil)~ and remove
the link to the cloned repo from local-projects. Also restart the REPL.

*** verifying quicklisp can see the new repos
#+begin_example
CL-USER> (ql:system-apropos "telegram")
#<SYSTEM cl-telegram-bot / cl-telegram-bot-20230214-git / quicklisp 2023-02-15>
#<SYSTEM cl-telegram-bot / 40ants-cl-telegram-bot-20230407060324 / ultralisp 20230417193001>
#+end_example

That shows 2 different cl-telegram-bot systems in 2 different dists.

*** loading works
#+begin_example
CL-USER> (ql:quickload :cl-telegram-bot)
To load "cl-telegram-bot":
  Load 12 ASDF systems:
    alexandria arrows cffi cl+ssl cl-annot cl-base64
    cl-utilities fast-io iterate parse-declarations-1.0
    uiop usocket
  Install 43 Quicklisp releases:
    40ants-cl-telegram-bot Bike-introspect-environment
    C U T
[package trivial-backtrace].......................
[package cl-telegram-bot/core]
(:CL-TELEGRAM-BOT)
#+end_example

This time it works.

** Creating my own simple bot
defin package
#+begin_example
CL-USER> (defpackage the-bot (:use :cl :cl-telegram-bot))
#<PACKAGE "THE-BOT">
CL-USER> (in-package the-bot)
#<PACKAGE "THE-BOT">
THE-BOT>
#+end_example

define methods

#+begin_src lisp
    ;; define
  (defbot echo-bot)

    ;; method 1
  (defmethod on-message ((bot echo-bot)
                         text)
    (reply text))

  ;; method 2
  (defmethod on-command ((bot echo-bot)
                         (command (eql :help))
                         text)
    (declare (ignorable text))
    (reply "Just send me any text and I'll reply with the same text."))

  ;;; method 3
  (defmethod on-command ((bot echo-bot)
                         (command (eql :start))
                         text)
    (declare (ignorable text))
    (reply "Welcome Lisper! Have a fun, playing with cl-telegram-bot!"))
#+end_src

In desktop telegram client find ~BotFather~ and start communicating with him as
per 40ants documentation.
https://github.com/40ants/cl-telegram-bot

Please note that Telegram possibly has a bug. If the bot name doe not end with
bot but something like bot1, it will not work as expected.

** Success
This lead to working example with one minor difference from the original documentation

** Roswell
This page
https://github.com/roswell/roswell/releases
lists the latest version
https://github.com/roswell/roswell/releases/tag/v22.12.14.113

Installing it successfully can be confirmed in terminal:
#+begin_example
$ ros --version
roswell 22.12.14.113(NO-GIT-REVISION)
#+end_example

** Qlot
In terminal run:
#+begin_example
$ ros install qlot
#+end_example

The documentation is wrong about shell knowing about the newly installed qlot.
The new qlot was installed to: ~/.roswell/bin/qlot~

I may need to add
#+begin_example
/home/jacek/.roswell/bin
#+end_example
to the ~$PATH~.

** Trying to follow the instructions

#+begin_example
cd ~/Programming/Lisp/cl-telegram-bot/
qlot install
#+end_example

*** Bashrc modification
That did not work, so I will add the relevant line to bashrc.
#+begin_example
$ echo '' >> ~/.bashrc
$ echo 'export PATH="$PATH:$HOME/.roswell/bin"' >> ~/.bashrc
#+end_example

Restart the terminal and try new path. After running the following commands you
should see ~.roswell/bin~ in the PATH and output of qlot help.
#+begin_example
$ echo $PATH | grep roswell/bin
$ qlot help
#+end_example

*** Trying again

**** install dependencies

#+begin_example
cd ~/Programming/Lisp/cl-telegram-bot/
qlot install
#+end_example

The output installs ultralisp and lots of its archives and ends with:

#+begin_example
Downloading http://dist.ultralisp.org/archive/851/Shinmera-dissect-20220720101913.tgz
##########################################################################
Successfully installed.
#+end_example

**** install Emacs
#+begin_example
qlot exec ros emacs
#+end_example

That installs some dependencies and starts new Emacs and in the terminal
displays a hint about modifying Emacs config.

#+begin_example
helper.el installed in "/home/jacek/.roswell/helper.el"

To use, add this to your ~/.emacs:

  (load (expand-file-name "~/.roswell/helper.el"))
#+end_example

For the time being I will ignore the Emacs config modification and will just
copy the Emacs Lisp snippet to *scratch buffer* of the newly started Emacs and
eval it there.

Then I will open slime and evaluate: ~(ql:quickload :cl-telegram-bot-docs)~

That will give error:
#+begin_example
(progn (load "/home/jacek/.roswell/lisp/slime/2023.02.15/swank-loader.lisp" :verbose t) (funcall (read-from-string "swank-loader:init") :from-emacs t) (funcall (read-from-string "swank:start-server") "/tmp/slime.120993"))

fatal error encountered in SBCL pid 125425 tid 125425:
core was built for runtime "6521a6bafe5f-root-2023-03-29-02-18-45" but this is "jacek-ixtreme-M5850-jacek-2023-04-17-19-31-34"


Process inferior-lisp exited abnormally with code 1
#+end_example

Now I will close all Emacs instances and will modify the Emacs config adding the
recommended snippet to my Emacs config.
#+begin_example
(load (expand-file-name "~/.roswell/helper.el"))
#+end_example

That leads to an error. Starting ~emacs --debug-init~ gives this error.
#+begin_example
Debugger entered--Lisp error: (void-function slime-setup)
  (slime-setup roswell-slime-contribs)
  (let ((slime-directory (roswell-directory type))) (add-to-list 'load-path slime-directory) (require 'slime-autoloads) (setq slime-backend (expand-file-name "swank-loader.lisp" slime-directory)) (setq slime-path slime-directory) (slime-setup roswell-slime-contribs))
  (cond ((equal type "slime") (let ((slime-directory (roswell-directory type))) (add-to-list 'load-path slime-directory) (require 'slime-autoloads) (setq slime-backend (expand-file-name "swank-loader.lisp" slime-directory)) (setq slime-path slime-directory) (slime-setup roswell-slime-contribs))) ((equal type "sly") (add-to-list 'load-path (roswell-directory type)) (require 'sly-autoloads)))
  (let ((type (or (condition-case nil (progn (roswell-opt "emacs.type")) (error nil)) "slime"))) (cond ((equal type "slime") (let ((slime-directory (roswell-directory type))) (add-to-list 'load-path slime-directory) (require 'slime-autoloads) (setq slime-backend (expand-file-name "swank-loader.lisp" slime-directory)) (setq slime-path slime-directory) (slime-setup roswell-slime-contribs))) ((equal type "sly") (add-to-list 'load-path (roswell-directory type)) (require 'sly-autoloads))))
  eval-buffer(#<buffer  *load*-702221> nil "/home/jacek/.roswell/helper.el" nil t)  ; Reading at buffer position 1541
#+end_example

I suspect problem in helper and will start debugging.
file:~/.roswell/helper.el::1

Initial suspicion about incorrectly detected emacs type was wrong.
file:~/.roswell/helper.el::30
and trying to run slime from the terminal and finding lisp version showed I was
running my experimental compilation from source when I invoked slime from Emacs.

**** Trying ros run in the terminal in the wrong folder

Running in the terminal gives me different lisp version:
#+begin_example
$ ros run
* (lisp-implementation-type)
"SBCL"
* (lisp-implementation-version)
"2.3.3"
#+end_example

but then I have error again
#+begin_example
* (ql:quickload :cl-telegram-bot-docs)

debugger invoked on a QUICKLISP-CLIENT:SYSTEM-NOT-FOUND in thread
#<THREAD tid=148860 "main thread" RUNNING {10044A0113}>:
  System "cl-telegram-bot-docs" not found

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [CONTINUE               ] Try again
  1: [ABORT                  ] Give up on "cl-telegram-bot-docs"
  2: [REGISTER-LOCAL-PROJECTS] Register local projects and try again.
  3:                           Exit debugger, returning to top level.

((LABELS QUICKLISP-CLIENT::RECURSE :IN QUICKLISP-CLIENT::COMPUTE-LOAD-STRATEGY) "cl-telegram-bot-docs")
   source: (CERROR "Try again" 'SYSTEM-NOT-FOUND :NAME NAME)
#+end_example

**** Trying ros run in the terminal in the RIGHT folder

It gives another error
#+begin_example
acek@jacek-ixtreme-M5850:~/Programming/Lisp/cl-telegram-bot$ ros run
* (ql:quickload :docs-builder)
To load "docs-builder":
  Load 5 ASDF systems:
    alexandria asdf bordeaux-threads named-readtables uiop
  Install 4 Quicklisp releases:
    doc docs-builder log4cl pythonic-string-reader
Downloading http://beta.quicklisp.org/archive/log4cl/2021-12-09/log4cl-20211209-git.tgz
##########################################################################
Downloading http://beta.quicklisp.org/archive/pythonic-string-reader/2018-07-11/pythonic-string-reader-20180711-git.tgz
##########################################################################
Downloading http://beta.quicklisp.org/archive/doc/2023-02-14/doc-20230214-git.tgz
##########################################################################
Downloading http://beta.quicklisp.org/archive/docs-builder/2023-02-14/docs-builder-20230214-git.tgz
##########################################################################
; Loading "docs-builder"
[package log4cl.package-setup]....................
[package log4cl-impl]....;
; caught ERROR:
;   READ error during COMPILE-FILE:
;
;     Lock on package SB-C violated when interning LAMBDA-PARENT while in package
;     LOG4CL-IMPL.
;   See also:
;     The SBCL Manual, Node "Package Locks"
;
;     (in form starting at line: 99, column: 0, position: 3779)

debugger invoked on a UIOP/LISP-BUILD:COMPILE-FILE-ERROR in thread
#<THREAD tid=156897 "main thread" RUNNING {10044A0113}>:
  COMPILE-FILE-ERROR while
  compiling #<CL-SOURCE-FILE "log4cl" "src" "naming-sbcl">

Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.

restarts (invokable by number or by possibly-abbreviated name):
  0: [RETRY                        ] Retry
                                     compiling #<CL-SOURCE-FILE "log4cl" "src" "naming-sbcl">.
  1: [ACCEPT                       ] Continue, treating
                                     compiling #<CL-SOURCE-FILE "log4cl" "src" "naming-sbcl">
                                     as having been successful.
  2:                                 Retry ASDF operation.
  3: [CLEAR-CONFIGURATION-AND-RETRY] Retry ASDF operation after resetting the
                                     configuration.
  4:                                 Retry ASDF operation.
  5:                                 Retry ASDF operation after resetting the
                                     configuration.
  6: [ABORT                        ] Give up on "docs-builder"
  7: [REGISTER-LOCAL-PROJECTS      ] Register local projects and try again.
  8:                                 Exit debugger, returning to top level.

(UIOP/LISP-BUILD:CHECK-LISP-COMPILE-RESULTS NIL T T "~/asdf-action::format-action/" ((#<ASDF/LISP-ACTION:COMPILE-OP > . #<ASDF/LISP-ACTION:CL-SOURCE-FILE "log4cl" "src" "naming-sbcl">)))
   error finding frame source: Bogus form-number: the source file has probably
                               changed too much to cope with.
   source: NIL
0] 6
;
; compilation unit aborted
;   caught 2 fatal ERROR conditions
;   caught 1 ERROR condition

(:DOCS-BUILDER)

#+end_example
